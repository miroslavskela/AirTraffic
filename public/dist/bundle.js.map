{"version":3,"sources":["node_modules/browser-pack/_prelude.js","public/js/ctrl.js","public/js/data.js","public/js/ui.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Flight","adaptData","baseUrl","displayFlights","displaySingleFlight","displayError","$row","$","$spinner","$tbody","showError","error","empty","append","message","fetchFlights","lat","lng","url","get","dataType","done","onSuccessHandler","fail","onErrorHandler","response","console","log","adaptedData","document","addEventListener","event","target","className","stopPropagation","flightIndex","getAttribute","localStorage","setItem","JSON","stringify","location","assign","showLoading","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","setInterval","[object Object]","flight","ldv","this","id","Id","altitude","Alt","model","Mdl","trak","Trak","from","From","to","To","man","Man","Logo","logo","lastDv","acList","map","adaptLogo","baseUrl1","$tableBody","flights","sort","b","forEach","flightData","getImage","createFlightView","errorMsg","createSingleFlightView"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","    const {Flight, adaptData,  baseUrl} = require('./data.js');\r\n    const {displayFlights, displaySingleFlight, displayError} = require('./ui.js')\r\n    $row = $('.row')\r\n    $spinner = $('.spinner1')\r\n    $tbody = $('.body')\r\n    \r\n\r\n    const init = () => {\r\n        showLoading()\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition((position) => {\r\n                fetchFlights(baseUrl, position.coords.latitude, position.coords.longitude)\r\n                setInterval(function(){\r\n                    fetchFlights(baseUrl, position.coords.latitude,position.coords.longitude);\r\n                }, 60000) // reload every 60 seconds\r\n            }, showError) //for denied geoLocation\r\n        } else if (!navigator.geolocation) {\r\n            $spinner.empty()\r\n            $tbody.empty()\r\n            $tbody.append(`<tr><td class='error' colspan='3'>Geolocation is not supported by your browser<td></tr>`)   \r\n        } // if browser supports geolocation it asks for permission to track user location\r\n    }// function that is invoked in html script when document is ready\r\n\r\n\r\n    showError = (error) => {\r\n        $spinner.empty()\r\n        $tbody.empty()\r\n        $tbody.append(`<tr><td class='error' colspan='3'>Error ${error.code}:${error.message}<td></tr>`)\r\n    } // show error function which displays error with navigator position\r\n\r\n    \r\n\r\n     fetchFlights = (baseUrl, lat, lng) => {\r\n        let url = baseUrl + lat + \"&lng=\" + lng + \"&fDstL=0&fDstU=100\"\r\n        $.get({\r\n            url,\r\n            dataType: \"jsonp\"\r\n        })\r\n            .done(onSuccessHandler)\r\n            .fail(onErrorHandler)\r\n    }// http request using jquery and ajax\r\n\r\n\r\n    onSuccessHandler = (response) => {\r\n       $spinner.empty()\r\n       console.log(response);\r\n       const adaptedData = adaptData(response) // function that returns flight object, from data module\r\n      displayFlights(adaptedData)\r\n      \r\n       document.addEventListener('click', function(event){\r\n         if( event.target.className == 'flight-field'){\r\n                event.stopPropagation()\r\n\r\n                let target = event.target\r\n                let flightIndex = target.getAttribute(\"data-flight-id\")\r\n                \r\n                localStorage.setItem(\"flightInfo\", JSON.stringify(adaptedData[flightIndex]))\r\n                location.assign('singleFlight.html')\r\n            }\r\n        })\r\n    } //function that is called on done request and it displays data and when document is ready it add eventlisteners\r\n     //on each flight and displays only one flight from adaptedData array using localStorage\r\n    \r\n\r\n    onErrorHandler = () => {\r\n        $spinner.empty()\r\n        displayError()\r\n    }// error function \r\n\r\n    showLoading = () => {\r\n        $spinner.append('<div class=\"spinner\"></div>')\r\n    }//function that attach spinner \r\n \r\n\r\n    document.addEventListener('DOMContentLoaded', init)\r\n// module.export = {init}","\r\n\r\nconst baseUrl =  \"http://public-api.adsbexchange.com/VirtualRadar/AircraftList.json?lat=\"\r\nconst baseUrl1 = \"https://autocomplete.clearbit.com/v1/companies/suggest?query=\"\r\n\r\nclass Flight{\r\n    constructor(flight, ldv){\r\n    this.id = flight.Id\r\n    this.altitude = flight.Alt || \"No data\"\r\n    this.model = flight.Mdl\r\n    this.ldv = ldv \r\n    this.trak = flight.Trak\r\n    this.from = flight.From || \"No data\"\r\n    this.to = flight.To || \"No data\"\r\n    this.man = flight.Man\r\n }\r\n\r\n getImage(){\r\n     if(this.trak > 180){\r\n         return (\"<img class='sidewest' width='20px' src='../img/planewest.png' title='West'/>\")\r\n     } else{\r\n         return (\"<img class='sideeast' width='20px' src='../img/planeeast.png' title='East'/>\")\r\n     }\r\n }\r\n} // Flight object\r\n\r\nclass Logo{\r\n    constructor(logo){\r\n        this.logo = logo.logo || \"No image available\"\r\n    }\r\n} // Logo object\r\n\r\n\r\nconst adaptData = (flight) => {\r\n    const ldv = flight.lastDv\r\n    const flights = flight.acList\r\n    const flightsArray = flights.map((flight) => {\r\n        return new Flight(flight, ldv)\r\n})\r\n\r\nreturn flightsArray\r\n} // function that receives flights and and makes Flight object of them and returns array of flight objects\r\n\r\nconst adaptLogo = (logo) => {\r\n    if(logo.length > 1){\r\n    return new Logo(logo[0])\r\n} else{\r\n    return new Logo(logo)\r\n}\r\n} //function that accepts logo and makes logo object, if there is array of responses always take first item of array\r\n\r\nmodule.exports = {Flight, Logo, adaptData, adaptLogo, baseUrl, baseUrl1}\r\n\r\n","\r\n$tableBody = $('.body');\r\nconst createFlightView = (flight, i) => {\r\n     const {altitude, id, trak} = flight\r\n        return ( `<tr>\r\n        <td class=\"flight-field\" data-flight-id=${i}>${flight.getImage()}</td>\r\n        <td class=\"flight-field\" data-flight-id=${i}>${altitude}</td>\r\n        <td class=\"flight-field\" data-flight-id=${i}>${id}</td>\r\n        </tr>`\r\n    )\r\n} // function that accepts flight and makes table cells of flight data and also add attr index which is used to show single flight data\r\n\r\nconst createSingleFlightView = (flight, logo) => {\r\n    const {model, from, to} = flight\r\n    const url = \"http://logo.clearbit.com/\";\r\n    return ( `<tr>\r\n    <td>${model}</td>\r\n    <td>${from}</td>\r\n    <td>${to}</td>\r\n    <td><img width=\"50px\" src=${url}${logo}.com  alt=${logo}></td>\r\n    </tr>`\r\n)\r\n} // function that accepts flight and logo and makes table cells with those data to show info about single flight\r\n\r\nconst displayFlights = (flights) => {\r\n    $tableBody.empty()\r\n    const sortedArray =  flights.sort(function(a,b){\r\n        return b.altitude-a.altitude\r\n    })\r\n\r\n    sortedArray.forEach((flight, i) => {\r\n        const flightData  = createFlightView(flight,i)\r\n        $tableBody.append(flightData)\r\n    })\r\n} // functions that accepts array of flights and for each flight makes flight view and append it to table body\r\n\r\nconst displaySingleFlight = (flight, logo) => {\r\n    const flightData = createSingleFlightView(flight,logo)\r\n    $tableBody.append(flightData) \r\n    \r\n} // function that accepts one flight and create single flight view and append it to table body\r\n\r\n\r\nconst displayError = () => { \r\n    const errorMsg = new Error(\"Could not fetch data!\")\r\n    $tableBody.append(`<tr><td class=\"error\" colspan=\"3\">${errorMsg.message}<td></tr>`)\r\n} // display error function \r\n\r\n\r\n\r\n\r\nmodule.exports = {displayFlights, displayError, displaySingleFlight}"]}